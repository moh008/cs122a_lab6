
moh008_lab6_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800108  00800108  000005ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f18  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069c  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062e  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000033c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	be d1       	rcall	.+892    	; 0x440 <main>
  c4:	42 c2       	rjmp	.+1156   	; 0x54a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
  cc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
  d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
  d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
  d8:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <_avr_timer_cntcurr>
  dc:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <_avr_timer_cntcurr+0x1>
  e0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_cntcurr+0x2>
  e4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 10e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 112:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 116:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 11a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 11e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 122:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 126:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 144:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_avr_timer_cntcurr>
 148:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <_avr_timer_cntcurr+0x2>
 150:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 15e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 162:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 166:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 180:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 184:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 188:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 18c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 190:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 194:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
	}
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
#define RS 6				// pin number of uC connected to pin 4 of LCD disp.
#define E 7					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 1d0:	5e 98       	cbi	0x0b, 6	; 11
	DATA_BUS = Command;
 1d2:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 1d6:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 1d8:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	de df       	rcall	.-68     	; 0x1aa <delay_ms>
	LCD_WriteCommand(0x38);
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	ef df       	rcall	.-34     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	ed df       	rcall	.-38     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	eb df       	rcall	.-42     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	e9 df       	rcall	.-46     	; 0x1d0 <LCD_WriteCommand>
	delay_ms(10);						 
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	d3 cf       	rjmp	.-90     	; 0x1aa <delay_ms>
 204:	08 95       	ret

00000206 <LCD_WriteData>:
 206:	5e 9a       	sbi	0x0b, 6	; 11
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 208:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 20a:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 20c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 20e:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ca cf       	rjmp	.-108    	; 0x1aa <delay_ms>
 216:	08 95       	ret

00000218 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 218:	81 31       	cpi	r24, 0x11	; 17
 21a:	18 f4       	brcc	.+6      	; 0x222 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 21c:	81 58       	subi	r24, 0x81	; 129
 21e:	d8 cf       	rjmp	.-80     	; 0x1d0 <LCD_WriteCommand>
 220:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 222:	81 55       	subi	r24, 0x51	; 81
 224:	d5 cf       	rjmp	.-86     	; 0x1d0 <LCD_WriteCommand>
 226:	08 95       	ret

00000228 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	18 2f       	mov	r17, r24
 232:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 234:	d6 df       	rcall	.-84     	; 0x1e2 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 23c:	01 e0       	ldi	r16, 0x01	; 1
 23e:	01 0f       	add	r16, r17
 240:	81 2f       	mov	r24, r17
 242:	ea df       	rcall	.-44     	; 0x218 <LCD_Cursor>
		LCD_WriteData(*string++);
 244:	89 91       	ld	r24, Y+
 246:	df df       	rcall	.-66     	; 0x206 <LCD_WriteData>
 248:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 24a:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 24c:	81 11       	cpse	r24, r1
 24e:	f6 cf       	rjmp	.-20     	; 0x23c <LCD_DisplayString+0x14>
 250:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <Button_tick>:
 25a:	81 30       	cpi	r24, 0x01	; 1

unsigned char wakecount = 0;
enum Buttons_States {inactive, press, hold, released};
int Button_tick(int state)
{
	switch (state)	//state transition
 25c:	91 05       	cpc	r25, r1
 25e:	f1 f0       	breq	.+60     	; 0x29c <Button_tick+0x42>
 260:	1c f4       	brge	.+6      	; 0x268 <Button_tick+0xe>
 262:	89 2b       	or	r24, r25
 264:	39 f0       	breq	.+14     	; 0x274 <Button_tick+0x1a>
 266:	3b c0       	rjmp	.+118    	; 0x2de <Button_tick+0x84>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	91 05       	cpc	r25, r1
 26c:	01 f1       	breq	.+64     	; 0x2ae <Button_tick+0x54>
 26e:	03 97       	sbiw	r24, 0x03	; 3
 270:	39 f1       	breq	.+78     	; 0x2c0 <Button_tick+0x66>
 272:	35 c0       	rjmp	.+106    	; 0x2de <Button_tick+0x84>
	{
		case inactive:
		PORTB = 0x00;	//turn off the backlight
 274:	15 b8       	out	0x05, r1	; 5
		wakecount = 0;
 276:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		if(buttons == wakeDisplay)
 27a:	80 b1       	in	r24, 0x00	; 0
		state = press;
		else
		state = inactive;
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	80 95       	com	r24
 280:	90 95       	com	r25
 282:	87 70       	andi	r24, 0x07	; 7
 284:	99 27       	eor	r25, r25
 286:	31 e0       	ldi	r19, 0x01	; 1
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	09 f0       	breq	.+2      	; 0x290 <Button_tick+0x36>
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	83 2f       	mov	r24, r19
 292:	92 2f       	mov	r25, r18
		state = inactive;
		LCD_ClearScreen();
		break;
	}
	
	switch (state) //state action
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	91 05       	cpc	r25, r1
 298:	21 f1       	breq	.+72     	; 0x2e2 <Button_tick+0x88>
 29a:	08 95       	ret
		else
		state = inactive;
		break;
		
		case press:
		if(buttons == wakeDisplay)
 29c:	80 b1       	in	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	80 95       	com	r24
 2a2:	90 95       	com	r25
 2a4:	87 70       	andi	r24, 0x07	; 7
 2a6:	99 27       	eor	r25, r25
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	d9 f4       	brne	.+54     	; 0x2e2 <Button_tick+0x88>
 2ac:	24 c0       	rjmp	.+72     	; 0x2f6 <Button_tick+0x9c>
			state = hold;
		}
		break;
		
		case hold:
		if(buttons == wakeDisplay)
 2ae:	80 b1       	in	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	80 95       	com	r24
 2b4:	90 95       	com	r25
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	99 27       	eor	r25, r25
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	59 f5       	brne	.+86     	; 0x314 <Button_tick+0xba>
 2be:	1b c0       	rjmp	.+54     	; 0x2f6 <Button_tick+0x9c>
			state = released;	
		}
		break;
		
		case released:
		if(wakecount == 60)
 2c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2c4:	8c 33       	cpi	r24, 0x3C	; 60
 2c6:	81 f1       	breq	.+96     	; 0x328 <Button_tick+0xce>
		state = inactive;
		else if (buttons == wakeDisplay)
 2c8:	80 b1       	in	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	87 70       	andi	r24, 0x07	; 7
 2d2:	99 27       	eor	r25, r25
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f4       	brne	.+60     	; 0x314 <Button_tick+0xba>
		{
			state = press;
			wakecount = 0;
 2d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <Button_tick+0x88>
		}
		break;
		
		default:
		state = inactive;
		LCD_ClearScreen();
 2de:	81 df       	rcall	.-254    	; 0x1e2 <LCD_ClearScreen>
		break;
 2e0:	23 c0       	rjmp	.+70     	; 0x328 <Button_tick+0xce>
	{
		case inactive:
		break;
		
		case press:
		PORTB = 0x01;	//turn on the backlight
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	85 b9       	out	0x05, r24	; 5
		wakecount++;
 2e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		break;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret
		
		case hold:
		PORTB = 0x01;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	85 b9       	out	0x05, r24	; 5
		wakecount++;
 2fa:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end>
 2fe:	6f 5f       	subi	r22, 0xFF	; 255
 300:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
		LCD_DisplayString(5, wakecount+'0');
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	60 5d       	subi	r22, 0xD0	; 208
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	8d df       	rcall	.-230    	; 0x228 <LCD_DisplayString>
		break;
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	08 95       	ret
		
		case released:
		PORTB = 0x01;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	85 b9       	out	0x05, r24	; 5
		wakecount++;
 318:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		break;
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	08 95       	ret
		
		case hold:
		PORTB = 0x01;
		wakecount++;
		LCD_DisplayString(5, wakecount+'0');
		break;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
		PORTB = 0x01;
		wakecount++;
		break;
	}
	return state;
};
 32c:	08 95       	ret

0000032e <updateCount>:
}

void updateCount(int incValue) {
    const char MAX_COUNT = 9;
    const char MIN_COUNT = 0;
    unsigned char newCount = count + incValue;
 32e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <count>
 332:	89 0f       	add	r24, r25
    if (MIN_COUNT <= newCount && newCount <= MAX_COUNT) {
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	10 f4       	brcc	.+4      	; 0x33c <updateCount+0xe>
        count = newCount;
 338:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count>
 33c:	08 95       	ret

0000033e <IncDec_tick>:
unsigned char count;
enum IncDec_States { Start, Wait, IncHold, DecHold, ResetHold };
void updateCount(int);
const unsigned char InitialCount = 3;
int IncDec_tick(int state) {
    switch (state) { // Transitions
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	91 05       	cpc	r25, r1
 342:	b1 f1       	breq	.+108    	; 0x3b0 <IncDec_tick+0x72>
 344:	2c f4       	brge	.+10     	; 0x350 <IncDec_tick+0x12>
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	59 f0       	breq	.+22     	; 0x360 <IncDec_tick+0x22>
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	69 f0       	breq	.+26     	; 0x368 <IncDec_tick+0x2a>
 34e:	54 c0       	rjmp	.+168    	; 0x3f8 <IncDec_tick+0xba>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	91 05       	cpc	r25, r1
 354:	09 f4       	brne	.+2      	; 0x358 <IncDec_tick+0x1a>
 356:	3f c0       	rjmp	.+126    	; 0x3d6 <IncDec_tick+0x98>
 358:	04 97       	sbiw	r24, 0x04	; 4
 35a:	09 f4       	brne	.+2      	; 0x35e <IncDec_tick+0x20>
 35c:	45 c0       	rjmp	.+138    	; 0x3e8 <IncDec_tick+0xaa>
 35e:	4c c0       	rjmp	.+152    	; 0x3f8 <IncDec_tick+0xba>
        case Start:
            count = InitialCount;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count>
            state = Wait;
            break;
 366:	48 c0       	rjmp	.+144    	; 0x3f8 <IncDec_tick+0xba>
        case Wait:
            if (buttons == Inc) 
 368:	80 b1       	in	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	80 95       	com	r24
 36e:	90 95       	com	r25
 370:	87 70       	andi	r24, 0x07	; 7
 372:	99 27       	eor	r25, r25
 374:	02 97       	sbiw	r24, 0x02	; 2
 376:	21 f4       	brne	.+8      	; 0x380 <IncDec_tick+0x42>
			{
				updateCount(1);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	d8 df       	rcall	.-80     	; 0x32e <updateCount>
 37e:	45 c0       	rjmp	.+138    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				state = IncHold;
			} 
			else if (buttons == Dec) 
 380:	80 b1       	in	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	80 95       	com	r24
 386:	90 95       	com	r25
 388:	87 70       	andi	r24, 0x07	; 7
 38a:	99 27       	eor	r25, r25
 38c:	04 97       	sbiw	r24, 0x04	; 4
 38e:	21 f4       	brne	.+8      	; 0x398 <IncDec_tick+0x5a>
			{
				updateCount(-1);
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	9f ef       	ldi	r25, 0xFF	; 255
 394:	cc df       	rcall	.-104    	; 0x32e <updateCount>
 396:	42 c0       	rjmp	.+132    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				state = DecHold;
            } 
			else if (buttons == Reset) 
 398:	80 b1       	in	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	80 95       	com	r24
 39e:	90 95       	com	r25
 3a0:	87 70       	andi	r24, 0x07	; 7
 3a2:	99 27       	eor	r25, r25
 3a4:	06 97       	sbiw	r24, 0x06	; 6
 3a6:	41 f5       	brne	.+80     	; 0x3f8 <IncDec_tick+0xba>
			{
                count = InitialCount;
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count>
 3ae:	3f c0       	rjmp	.+126    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			{
                state = Wait;
            }
            break;
        case IncHold:
            if (buttons == Inc) {
 3b0:	80 b1       	in	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	87 70       	andi	r24, 0x07	; 7
 3ba:	99 27       	eor	r25, r25
 3bc:	02 97       	sbiw	r24, 0x02	; 2
 3be:	29 f1       	breq	.+74     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
                state = IncHold;
            } else if (buttons == Reset) { // Intentional bug. Leave in.
 3c0:	80 b1       	in	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	80 95       	com	r24
 3c6:	90 95       	com	r25
 3c8:	87 70       	andi	r24, 0x07	; 7
 3ca:	99 27       	eor	r25, r25
 3cc:	06 97       	sbiw	r24, 0x06	; 6
 3ce:	a1 f4       	brne	.+40     	; 0x3f8 <IncDec_tick+0xba>
                PORTD = 0xFF;
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	8b b9       	out	0x0b, r24	; 11
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <IncDec_tick+0x96>
            } else {
                state = Wait;
            }
            break;
        case DecHold:
            if (buttons == Dec) {
 3d6:	80 b1       	in	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	87 70       	andi	r24, 0x07	; 7
 3e0:	99 27       	eor	r25, r25
 3e2:	04 97       	sbiw	r24, 0x04	; 4
 3e4:	49 f4       	brne	.+18     	; 0x3f8 <IncDec_tick+0xba>
 3e6:	1a c0       	rjmp	.+52     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
            } else {
                state = Wait;
            }
            break;
        case ResetHold:
            if (buttons == Reset) {
 3e8:	80 b1       	in	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 95       	com	r24
 3ee:	90 95       	com	r25
 3f0:	87 70       	andi	r24, 0x07	; 7
 3f2:	99 27       	eor	r25, r25
 3f4:	06 97       	sbiw	r24, 0x06	; 6
        case Start:
		LCD_Cursor(1);LCD_WriteData(count+'0');
		break;
		
        case Wait:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 3f6:	d9 f0       	breq	.+54     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e df       	rcall	.-484    	; 0x218 <LCD_Cursor>
 3fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 400:	80 5d       	subi	r24, 0xD0	; 208
 402:	01 df       	rcall	.-510    	; 0x206 <LCD_WriteData>
        break;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
		
		case IncHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	05 df       	rcall	.-502    	; 0x218 <LCD_Cursor>
 40e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 412:	80 5d       	subi	r24, 0xD0	; 208
        break;
 414:	f8 de       	rcall	.-528    	; 0x206 <LCD_WriteData>
 416:	82 e0       	ldi	r24, 0x02	; 2
		
		case DecHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	08 95       	ret
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	fc de       	rcall	.-520    	; 0x218 <LCD_Cursor>
 420:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 424:	80 5d       	subi	r24, 0xD0	; 208
        break;
 426:	ef de       	rcall	.-546    	; 0x206 <LCD_WriteData>
 428:	83 e0       	ldi	r24, 0x03	; 3
		
		case ResetHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	08 95       	ret
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	f3 de       	rcall	.-538    	; 0x218 <LCD_Cursor>
 432:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 436:	80 5d       	subi	r24, 0xD0	; 208
 438:	e6 de       	rcall	.-564    	; 0x206 <LCD_WriteData>
        break;
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
 43e:	08 95       	ret

00000440 <main>:
	
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 440:	11 b8       	out	0x01, r1	; 1
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 446:	84 b9       	out	0x04, r24	; 4
 448:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 44a:	87 b9       	out	0x07, r24	; 7
 44c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 44e:	8a b9       	out	0x0a, r24	; 10
 450:	1b b8       	out	0x0b, r1	; 11
	
	unsigned long int SMTick1_period = 1;
	unsigned long int SMTick2_period = 2;
	
	//Task 1 Counter task
	task1.state = -1; //task initial state
 452:	e5 e1       	ldi	r30, 0x15	; 21
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	80 83       	st	Z, r24
	task1.period = SMTick1_period;
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	50 e0       	ldi	r21, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	42 83       	std	Z+2, r20	; 0x02
 462:	53 83       	std	Z+3, r21	; 0x03
 464:	64 83       	std	Z+4, r22	; 0x04
 466:	75 83       	std	Z+5, r23	; 0x05
	task1.active = 0x01;
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	91 83       	std	Z+1, r25	; 0x01
	task1.elapsedTime = SMTick1_period;
 46c:	46 83       	std	Z+6, r20	; 0x06
 46e:	57 83       	std	Z+7, r21	; 0x07
 470:	60 87       	std	Z+8, r22	; 0x08
 472:	71 87       	std	Z+9, r23	; 0x09
	task1.TickFct = &Button_tick;
 474:	2d e2       	ldi	r18, 0x2D	; 45
 476:	31 e0       	ldi	r19, 0x01	; 1
 478:	33 87       	std	Z+11, r19	; 0x0b
 47a:	22 87       	std	Z+10, r18	; 0x0a
	
	//Task 1 Counter task
	task2.state = -1; //task initial state
 47c:	e9 e0       	ldi	r30, 0x09	; 9
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	80 83       	st	Z, r24
	task2.period = SMTick2_period;
 482:	02 e0       	ldi	r16, 0x02	; 2
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	02 83       	std	Z+2, r16	; 0x02
 48c:	13 83       	std	Z+3, r17	; 0x03
 48e:	24 83       	std	Z+4, r18	; 0x04
 490:	35 83       	std	Z+5, r19	; 0x05
	task2.active = 0x01;
 492:	91 83       	std	Z+1, r25	; 0x01
	task2.elapsedTime = SMTick1_period;
 494:	46 83       	std	Z+6, r20	; 0x06
 496:	57 83       	std	Z+7, r21	; 0x07
 498:	60 87       	std	Z+8, r22	; 0x08
 49a:	71 87       	std	Z+9, r23	; 0x09
	task2.TickFct = &IncDec_tick;
 49c:	8f e9       	ldi	r24, 0x9F	; 159
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	93 87       	std	Z+11, r25	; 0x0b
 4a2:	82 87       	std	Z+10, r24	; 0x0a
	
	LCD_init();
 4a4:	a1 de       	rcall	.-702    	; 0x1e8 <LCD_init>
	TimerSet(50);
 4a6:	62 e3       	ldi	r22, 0x32	; 50
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 4ae:	0c de       	rcall	.-1000   	; 0xc8 <TimerSet>
 4b0:	1c de       	rcall	.-968    	; 0xea <TimerOn>
 4b2:	0f 2e       	mov	r0, r31
 4b4:	f4 e0       	ldi	r31, 0x04	; 4
 4b6:	cf 2e       	mov	r12, r31
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	df 2e       	mov	r13, r31
 4bc:	f0 2d       	mov	r31, r0
 4be:	c0 e0       	ldi	r28, 0x00	; 0
 4c0:	d1 e0       	ldi	r29, 0x01	; 1
 4c2:	7e 01       	movw	r14, r28
	
	while (1)
	{
		for ( i = 0; i < numTasks; i++)
		{
			if (tasks[i]->active == 0x01)
 4c4:	08 81       	ld	r16, Y
 4c6:	19 81       	ldd	r17, Y+1	; 0x01
 4c8:	d8 01       	movw	r26, r16
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	8c 91       	ld	r24, X
 4ce:	11 97       	sbiw	r26, 0x01	; 1
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	81 f5       	brne	.+96     	; 0x534 <main+0xf4>
			{
				if(tasks[i]->elapsedTime == tasks[i]->period)
 4d4:	16 96       	adiw	r26, 0x06	; 6
 4d6:	4d 91       	ld	r20, X+
 4d8:	5d 91       	ld	r21, X+
 4da:	6d 91       	ld	r22, X+
 4dc:	7c 91       	ld	r23, X
 4de:	19 97       	sbiw	r26, 0x09	; 9
 4e0:	12 96       	adiw	r26, 0x02	; 2
 4e2:	8d 91       	ld	r24, X+
 4e4:	9d 91       	ld	r25, X+
 4e6:	0d 90       	ld	r0, X+
 4e8:	bc 91       	ld	r27, X
 4ea:	a0 2d       	mov	r26, r0
 4ec:	48 17       	cp	r20, r24
 4ee:	59 07       	cpc	r21, r25
 4f0:	6a 07       	cpc	r22, r26
 4f2:	7b 07       	cpc	r23, r27
 4f4:	89 f4       	brne	.+34     	; 0x518 <main+0xd8>
				{
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4f6:	f8 01       	movw	r30, r16
 4f8:	80 81       	ld	r24, Z
 4fa:	02 84       	ldd	r0, Z+10	; 0x0a
 4fc:	f3 85       	ldd	r31, Z+11	; 0x0b
 4fe:	e0 2d       	mov	r30, r0
 500:	08 2e       	mov	r0, r24
 502:	00 0c       	add	r0, r0
 504:	99 0b       	sbc	r25, r25
 506:	09 95       	icall
 508:	d8 01       	movw	r26, r16
 50a:	8c 93       	st	X, r24
					tasks[i]->elapsedTime = 0;
 50c:	e8 81       	ld	r30, Y
 50e:	f9 81       	ldd	r31, Y+1	; 0x01
 510:	16 82       	std	Z+6, r1	; 0x06
 512:	17 82       	std	Z+7, r1	; 0x07
 514:	10 86       	std	Z+8, r1	; 0x08
 516:	11 86       	std	Z+9, r1	; 0x09
				}
				tasks[i]->elapsedTime += 1;
 518:	d7 01       	movw	r26, r14
 51a:	ed 91       	ld	r30, X+
 51c:	fc 91       	ld	r31, X
 51e:	86 81       	ldd	r24, Z+6	; 0x06
 520:	97 81       	ldd	r25, Z+7	; 0x07
 522:	a0 85       	ldd	r26, Z+8	; 0x08
 524:	b1 85       	ldd	r27, Z+9	; 0x09
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	a1 1d       	adc	r26, r1
 52a:	b1 1d       	adc	r27, r1
 52c:	86 83       	std	Z+6, r24	; 0x06
 52e:	97 83       	std	Z+7, r25	; 0x07
 530:	a0 87       	std	Z+8, r26	; 0x08
 532:	b1 87       	std	Z+9, r27	; 0x09
 534:	22 96       	adiw	r28, 0x02	; 2
	
	unsigned short i;
	
	while (1)
	{
		for ( i = 0; i < numTasks; i++)
 536:	cc 15       	cp	r28, r12
 538:	dd 05       	cpc	r29, r13
 53a:	19 f6       	brne	.-122    	; 0x4c2 <main+0x82>
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += 1;
			}
		}
		while (!TimerFlag);
 53c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <TimerFlag>
 540:	88 23       	and	r24, r24
 542:	e1 f3       	breq	.-8      	; 0x53c <main+0xfc>
		TimerFlag = 0;
 544:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <TimerFlag>
	}
 548:	ba cf       	rjmp	.-140    	; 0x4be <main+0x7e>

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
