
moh008_lab6_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800108  00800108  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f09  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069c  00000000  00000000  00001f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000622  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ac d1       	rcall	.+856    	; 0x41c <main>
  c4:	30 c2       	rjmp	.+1120   	; 0x526 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
  c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
  cc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
  d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
  d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
  d8:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <_avr_timer_cntcurr>
  dc:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <_avr_timer_cntcurr+0x1>
  e0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_cntcurr+0x2>
  e4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 10e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 112:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 116:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 11a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 11e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 122:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 126:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_avr_timer_cntcurr>
 148:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <_avr_timer_cntcurr+0x2>
 150:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 15e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 162:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 166:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <TimerFlag>
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 180:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 184:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 188:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 18c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 190:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 194:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <Button_tick>:
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 05       	cpc	r25, r1
 1ec:	09 f1       	breq	.+66     	; 0x230 <Button_tick+0x48>
 1ee:	1c f4       	brge	.+6      	; 0x1f6 <Button_tick+0xe>
 1f0:	89 2b       	or	r24, r25
 1f2:	39 f0       	breq	.+14     	; 0x202 <Button_tick+0x1a>
 1f4:	3e c0       	rjmp	.+124    	; 0x272 <Button_tick+0x8a>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	91 05       	cpc	r25, r1
 1fa:	19 f1       	breq	.+70     	; 0x242 <Button_tick+0x5a>
 1fc:	03 97       	sbiw	r24, 0x03	; 3
 1fe:	51 f1       	breq	.+84     	; 0x254 <Button_tick+0x6c>
 200:	38 c0       	rjmp	.+112    	; 0x272 <Button_tick+0x8a>
 202:	15 b8       	out	0x05, r1	; 5
 204:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 208:	80 b1       	in	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	80 95       	com	r24
 20e:	90 95       	com	r25
 210:	87 70       	andi	r24, 0x07	; 7
 212:	99 27       	eor	r25, r25
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	09 f0       	breq	.+2      	; 0x21e <Button_tick+0x36>
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	83 2f       	mov	r24, r19
 220:	92 2f       	mov	r25, r18
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	91 05       	cpc	r25, r1
 226:	71 f1       	breq	.+92     	; 0x284 <Button_tick+0x9c>
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	09 f0       	breq	.+2      	; 0x22e <Button_tick+0x46>
 22c:	4d c0       	rjmp	.+154    	; 0x2c8 <Button_tick+0xe0>
 22e:	22 c0       	rjmp	.+68     	; 0x274 <Button_tick+0x8c>
 230:	80 b1       	in	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	80 95       	com	r24
 236:	90 95       	com	r25
 238:	87 70       	andi	r24, 0x07	; 7
 23a:	99 27       	eor	r25, r25
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	11 f5       	brne	.+68     	; 0x284 <Button_tick+0x9c>
 240:	30 c0       	rjmp	.+96     	; 0x2a2 <Button_tick+0xba>
 242:	80 b1       	in	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 95       	com	r24
 248:	90 95       	com	r25
 24a:	87 70       	andi	r24, 0x07	; 7
 24c:	99 27       	eor	r25, r25
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	91 f5       	brne	.+100    	; 0x2b6 <Button_tick+0xce>
 252:	27 c0       	rjmp	.+78     	; 0x2a2 <Button_tick+0xba>
 254:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 258:	8c 33       	cpi	r24, 0x3C	; 60
 25a:	61 f0       	breq	.+24     	; 0x274 <Button_tick+0x8c>
 25c:	80 b1       	in	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 95       	com	r24
 262:	90 95       	com	r25
 264:	87 70       	andi	r24, 0x07	; 7
 266:	99 27       	eor	r25, r25
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	29 f5       	brne	.+74     	; 0x2b6 <Button_tick+0xce>
 26c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 270:	09 c0       	rjmp	.+18     	; 0x284 <Button_tick+0x9c>
 272:	b7 df       	rcall	.-146    	; 0x1e2 <LCD_ClearScreen>
 274:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
 278:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
 27c:	11 82       	std	Z+1, r1	; 0x01
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	85 b9       	out	0x05, r24	; 5
 288:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
 28c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
 290:	81 83       	std	Z+1, r24	; 0x01
 292:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	85 b9       	out	0x05, r24	; 5
 2a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	08 95       	ret
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	85 b9       	out	0x05, r24	; 5
 2ba:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <LCD_init>:
 2ca:	84 e6       	ldi	r24, 0x64	; 100
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	6d df       	rcall	.-294    	; 0x1aa <delay_ms>
 2d0:	88 e3       	ldi	r24, 0x38	; 56
 2d2:	7e df       	rcall	.-260    	; 0x1d0 <LCD_WriteCommand>
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	7c df       	rcall	.-264    	; 0x1d0 <LCD_WriteCommand>
 2d8:	8f e0       	ldi	r24, 0x0F	; 15
 2da:	7a df       	rcall	.-268    	; 0x1d0 <LCD_WriteCommand>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	78 df       	rcall	.-272    	; 0x1d0 <LCD_WriteCommand>
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	62 cf       	rjmp	.-316    	; 0x1aa <delay_ms>
 2e6:	08 95       	ret

000002e8 <LCD_WriteData>:
 2e8:	5e 9a       	sbi	0x0b, 6	; 11
 2ea:	88 b9       	out	0x08, r24	; 8
 2ec:	5f 9a       	sbi	0x0b, 7	; 11
 2ee:	00 00       	nop
 2f0:	5f 98       	cbi	0x0b, 7	; 11
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	59 cf       	rjmp	.-334    	; 0x1aa <delay_ms>
 2f8:	08 95       	ret

000002fa <LCD_Cursor>:
 2fa:	81 31       	cpi	r24, 0x11	; 17
 2fc:	18 f4       	brcc	.+6      	; 0x304 <LCD_Cursor+0xa>
 2fe:	81 58       	subi	r24, 0x81	; 129
 300:	67 cf       	rjmp	.-306    	; 0x1d0 <LCD_WriteCommand>
 302:	08 95       	ret
 304:	81 55       	subi	r24, 0x51	; 81
 306:	64 cf       	rjmp	.-312    	; 0x1d0 <LCD_WriteCommand>
 308:	08 95       	ret

0000030a <updateCount>:
}

void updateCount(int incValue) {
    const char MAX_COUNT = 9;
    const char MIN_COUNT = 0;
    unsigned char newCount = count + incValue;
 30a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <count>
 30e:	89 0f       	add	r24, r25
    if (MIN_COUNT <= newCount && newCount <= MAX_COUNT) {
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	10 f4       	brcc	.+4      	; 0x318 <updateCount+0xe>
        count = newCount;
 314:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count>
 318:	08 95       	ret

0000031a <IncDec_tick>:
unsigned char count;
enum IncDec_States { Start, Wait, IncHold, DecHold, ResetHold };
void updateCount(int);
const unsigned char InitialCount = 3;
int IncDec_tick(int state) {
    switch (state) { // Transitions
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	91 05       	cpc	r25, r1
 31e:	b1 f1       	breq	.+108    	; 0x38c <IncDec_tick+0x72>
 320:	2c f4       	brge	.+10     	; 0x32c <IncDec_tick+0x12>
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	59 f0       	breq	.+22     	; 0x33c <IncDec_tick+0x22>
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	69 f0       	breq	.+26     	; 0x344 <IncDec_tick+0x2a>
 32a:	54 c0       	rjmp	.+168    	; 0x3d4 <IncDec_tick+0xba>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <IncDec_tick+0x1a>
 332:	3f c0       	rjmp	.+126    	; 0x3b2 <IncDec_tick+0x98>
 334:	04 97       	sbiw	r24, 0x04	; 4
 336:	09 f4       	brne	.+2      	; 0x33a <IncDec_tick+0x20>
 338:	45 c0       	rjmp	.+138    	; 0x3c4 <IncDec_tick+0xaa>
 33a:	4c c0       	rjmp	.+152    	; 0x3d4 <IncDec_tick+0xba>
        case Start:
            count = InitialCount;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count>
            state = Wait;
            break;
 342:	48 c0       	rjmp	.+144    	; 0x3d4 <IncDec_tick+0xba>
        case Wait:
            if (buttons == Inc) 
 344:	80 b1       	in	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	80 95       	com	r24
 34a:	90 95       	com	r25
 34c:	87 70       	andi	r24, 0x07	; 7
 34e:	99 27       	eor	r25, r25
 350:	02 97       	sbiw	r24, 0x02	; 2
 352:	21 f4       	brne	.+8      	; 0x35c <IncDec_tick+0x42>
			{
				updateCount(1);
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	d8 df       	rcall	.-80     	; 0x30a <updateCount>
 35a:	45 c0       	rjmp	.+138    	; 0x3e6 <IncDec_tick+0xcc>
				state = IncHold;
			} 
			else if (buttons == Dec) 
 35c:	80 b1       	in	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	80 95       	com	r24
 362:	90 95       	com	r25
 364:	87 70       	andi	r24, 0x07	; 7
 366:	99 27       	eor	r25, r25
 368:	04 97       	sbiw	r24, 0x04	; 4
 36a:	21 f4       	brne	.+8      	; 0x374 <IncDec_tick+0x5a>
			{
				updateCount(-1);
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	cc df       	rcall	.-104    	; 0x30a <updateCount>
 372:	42 c0       	rjmp	.+132    	; 0x3f8 <IncDec_tick+0xde>
				state = DecHold;
            } 
			else if (buttons == Reset) 
 374:	80 b1       	in	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	80 95       	com	r24
 37a:	90 95       	com	r25
 37c:	87 70       	andi	r24, 0x07	; 7
 37e:	99 27       	eor	r25, r25
 380:	06 97       	sbiw	r24, 0x06	; 6
 382:	41 f5       	brne	.+80     	; 0x3d4 <IncDec_tick+0xba>
			{
                count = InitialCount;
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count>
 38a:	3f c0       	rjmp	.+126    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			{
                state = Wait;
            }
            break;
        case IncHold:
            if (buttons == Inc) {
 38c:	80 b1       	in	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	80 95       	com	r24
 392:	90 95       	com	r25
 394:	87 70       	andi	r24, 0x07	; 7
 396:	99 27       	eor	r25, r25
 398:	02 97       	sbiw	r24, 0x02	; 2
 39a:	29 f1       	breq	.+74     	; 0x3e6 <IncDec_tick+0xcc>
                state = IncHold;
            } else if (buttons == Reset) { // Intentional bug. Leave in.
 39c:	80 b1       	in	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	80 95       	com	r24
 3a2:	90 95       	com	r25
 3a4:	87 70       	andi	r24, 0x07	; 7
 3a6:	99 27       	eor	r25, r25
 3a8:	06 97       	sbiw	r24, 0x06	; 6
 3aa:	a1 f4       	brne	.+40     	; 0x3d4 <IncDec_tick+0xba>
                PORTD = 0xFF;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	8b b9       	out	0x0b, r24	; 11
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <IncDec_tick+0x96>
            } else {
                state = Wait;
            }
            break;
        case DecHold:
            if (buttons == Dec) {
 3b2:	80 b1       	in	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	87 70       	andi	r24, 0x07	; 7
 3bc:	99 27       	eor	r25, r25
 3be:	04 97       	sbiw	r24, 0x04	; 4
 3c0:	49 f4       	brne	.+18     	; 0x3d4 <IncDec_tick+0xba>
 3c2:	1a c0       	rjmp	.+52     	; 0x3f8 <IncDec_tick+0xde>
            } else {
                state = Wait;
            }
            break;
        case ResetHold:
            if (buttons == Reset) {
 3c4:	80 b1       	in	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	87 70       	andi	r24, 0x07	; 7
 3ce:	99 27       	eor	r25, r25
 3d0:	06 97       	sbiw	r24, 0x06	; 6
        case Start:
		LCD_Cursor(1);LCD_WriteData(count+'0');
		break;
		
        case Wait:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 3d2:	d9 f0       	breq	.+54     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	91 df       	rcall	.-222    	; 0x2fa <LCD_Cursor>
 3d8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 3dc:	80 5d       	subi	r24, 0xD0	; 208
 3de:	84 df       	rcall	.-248    	; 0x2e8 <LCD_WriteData>
        break;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
		
		case IncHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 3e4:	08 95       	ret
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	88 df       	rcall	.-240    	; 0x2fa <LCD_Cursor>
 3ea:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 3ee:	80 5d       	subi	r24, 0xD0	; 208
        break;
 3f0:	7b df       	rcall	.-266    	; 0x2e8 <LCD_WriteData>
 3f2:	82 e0       	ldi	r24, 0x02	; 2
		
		case DecHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	08 95       	ret
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	7f df       	rcall	.-258    	; 0x2fa <LCD_Cursor>
 3fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 400:	80 5d       	subi	r24, 0xD0	; 208
        break;
 402:	72 df       	rcall	.-284    	; 0x2e8 <LCD_WriteData>
 404:	83 e0       	ldi	r24, 0x03	; 3
		
		case ResetHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	76 df       	rcall	.-276    	; 0x2fa <LCD_Cursor>
 40e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count>
 412:	80 5d       	subi	r24, 0xD0	; 208
 414:	69 df       	rcall	.-302    	; 0x2e8 <LCD_WriteData>
        break;
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
 41a:	08 95       	ret

0000041c <main>:
	return state;
};
	
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 41c:	11 b8       	out	0x01, r1	; 1
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 422:	84 b9       	out	0x04, r24	; 4
 424:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 426:	87 b9       	out	0x07, r24	; 7
 428:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 42a:	8a b9       	out	0x0a, r24	; 10
 42c:	1b b8       	out	0x0b, r1	; 11
	
	unsigned long int SMTick1_period = 1;
	unsigned long int SMTick2_period = 2;
	
	//Task 1 Counter task
	task1.state = -1; //task initial state
 42e:	e5 e1       	ldi	r30, 0x15	; 21
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	80 83       	st	Z, r24
	task1.period = SMTick1_period;
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	42 83       	std	Z+2, r20	; 0x02
 43e:	53 83       	std	Z+3, r21	; 0x03
 440:	64 83       	std	Z+4, r22	; 0x04
 442:	75 83       	std	Z+5, r23	; 0x05
	task1.active = 0x01;
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	91 83       	std	Z+1, r25	; 0x01
	task1.elapsedTime = SMTick1_period;
 448:	46 83       	std	Z+6, r20	; 0x06
 44a:	57 83       	std	Z+7, r21	; 0x07
 44c:	60 87       	std	Z+8, r22	; 0x08
 44e:	71 87       	std	Z+9, r23	; 0x09
	task1.TickFct = &Button_tick;
 450:	24 ef       	ldi	r18, 0xF4	; 244
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	33 87       	std	Z+11, r19	; 0x0b
 456:	22 87       	std	Z+10, r18	; 0x0a
	
	//Task 1 Counter task
	task2.state = -1; //task initial state
 458:	e9 e0       	ldi	r30, 0x09	; 9
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	80 83       	st	Z, r24
	task2.period = SMTick2_period;
 45e:	02 e0       	ldi	r16, 0x02	; 2
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	02 83       	std	Z+2, r16	; 0x02
 468:	13 83       	std	Z+3, r17	; 0x03
 46a:	24 83       	std	Z+4, r18	; 0x04
 46c:	35 83       	std	Z+5, r19	; 0x05
	task2.active = 0x01;
 46e:	91 83       	std	Z+1, r25	; 0x01
	task2.elapsedTime = SMTick1_period;
 470:	46 83       	std	Z+6, r20	; 0x06
 472:	57 83       	std	Z+7, r21	; 0x07
 474:	60 87       	std	Z+8, r22	; 0x08
 476:	71 87       	std	Z+9, r23	; 0x09
	task2.TickFct = &IncDec_tick;
 478:	8d e8       	ldi	r24, 0x8D	; 141
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	93 87       	std	Z+11, r25	; 0x0b
 47e:	82 87       	std	Z+10, r24	; 0x0a
	
	LCD_init();
 480:	24 df       	rcall	.-440    	; 0x2ca <LCD_init>
	TimerSet(50);
 482:	62 e3       	ldi	r22, 0x32	; 50
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 48a:	1e de       	rcall	.-964    	; 0xc8 <TimerSet>
 48c:	2e de       	rcall	.-932    	; 0xea <TimerOn>
 48e:	0f 2e       	mov	r0, r31
 490:	f4 e0       	ldi	r31, 0x04	; 4
 492:	cf 2e       	mov	r12, r31
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	df 2e       	mov	r13, r31
 498:	f0 2d       	mov	r31, r0
 49a:	c0 e0       	ldi	r28, 0x00	; 0
 49c:	d1 e0       	ldi	r29, 0x01	; 1
 49e:	7e 01       	movw	r14, r28
	
	while (1)
	{
		for ( i = 0; i < numTasks; i++)
		{
			if (tasks[i]->active == 0x01)
 4a0:	08 81       	ld	r16, Y
 4a2:	19 81       	ldd	r17, Y+1	; 0x01
 4a4:	d8 01       	movw	r26, r16
 4a6:	11 96       	adiw	r26, 0x01	; 1
 4a8:	8c 91       	ld	r24, X
 4aa:	11 97       	sbiw	r26, 0x01	; 1
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	81 f5       	brne	.+96     	; 0x510 <main+0xf4>
			{
				if(tasks[i]->elapsedTime == tasks[i]->period)
 4b0:	16 96       	adiw	r26, 0x06	; 6
 4b2:	4d 91       	ld	r20, X+
 4b4:	5d 91       	ld	r21, X+
 4b6:	6d 91       	ld	r22, X+
 4b8:	7c 91       	ld	r23, X
 4ba:	19 97       	sbiw	r26, 0x09	; 9
 4bc:	12 96       	adiw	r26, 0x02	; 2
 4be:	8d 91       	ld	r24, X+
 4c0:	9d 91       	ld	r25, X+
 4c2:	0d 90       	ld	r0, X+
 4c4:	bc 91       	ld	r27, X
 4c6:	a0 2d       	mov	r26, r0
 4c8:	48 17       	cp	r20, r24
 4ca:	59 07       	cpc	r21, r25
 4cc:	6a 07       	cpc	r22, r26
 4ce:	7b 07       	cpc	r23, r27
 4d0:	89 f4       	brne	.+34     	; 0x4f4 <main+0xd8>
				{
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4d2:	f8 01       	movw	r30, r16
 4d4:	80 81       	ld	r24, Z
 4d6:	02 84       	ldd	r0, Z+10	; 0x0a
 4d8:	f3 85       	ldd	r31, Z+11	; 0x0b
 4da:	e0 2d       	mov	r30, r0
 4dc:	08 2e       	mov	r0, r24
 4de:	00 0c       	add	r0, r0
 4e0:	99 0b       	sbc	r25, r25
 4e2:	09 95       	icall
 4e4:	d8 01       	movw	r26, r16
 4e6:	8c 93       	st	X, r24
					tasks[i]->elapsedTime = 0;
 4e8:	e8 81       	ld	r30, Y
 4ea:	f9 81       	ldd	r31, Y+1	; 0x01
 4ec:	16 82       	std	Z+6, r1	; 0x06
 4ee:	17 82       	std	Z+7, r1	; 0x07
 4f0:	10 86       	std	Z+8, r1	; 0x08
 4f2:	11 86       	std	Z+9, r1	; 0x09
				}
				tasks[i]->elapsedTime += 1;
 4f4:	d7 01       	movw	r26, r14
 4f6:	ed 91       	ld	r30, X+
 4f8:	fc 91       	ld	r31, X
 4fa:	86 81       	ldd	r24, Z+6	; 0x06
 4fc:	97 81       	ldd	r25, Z+7	; 0x07
 4fe:	a0 85       	ldd	r26, Z+8	; 0x08
 500:	b1 85       	ldd	r27, Z+9	; 0x09
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	a1 1d       	adc	r26, r1
 506:	b1 1d       	adc	r27, r1
 508:	86 83       	std	Z+6, r24	; 0x06
 50a:	97 83       	std	Z+7, r25	; 0x07
 50c:	a0 87       	std	Z+8, r26	; 0x08
 50e:	b1 87       	std	Z+9, r27	; 0x09
 510:	22 96       	adiw	r28, 0x02	; 2
	
	unsigned short i;
	
	while (1)
	{
		for ( i = 0; i < numTasks; i++)
 512:	cc 15       	cp	r28, r12
 514:	dd 05       	cpc	r29, r13
 516:	19 f6       	brne	.-122    	; 0x49e <main+0x82>
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += 1;
			}
		}
		while (!TimerFlag);
 518:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <TimerFlag>
 51c:	88 23       	and	r24, r24
 51e:	e1 f3       	breq	.-8      	; 0x518 <main+0xfc>
		TimerFlag = 0;
 520:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <TimerFlag>
	}
 524:	ba cf       	rjmp	.-140    	; 0x49a <main+0x7e>

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
