
moh008_lab6_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800106  00800106  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed9  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097b  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000654  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000595  00000000  00000000  00002c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c1       	rjmp	.+816    	; 0x342 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	61 d1       	rcall	.+706    	; 0x386 <main>
  c4:	c1 c1       	rjmp	.+898    	; 0x448 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
  c8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
  cc:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
  d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
  d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
  d8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <_avr_timer_cntcurr>
  dc:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <_avr_timer_cntcurr+0x1>
  e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr+0x2>
  e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 10e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 112:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 116:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 11a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr>
 11e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x1>
 122:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_avr_timer_cntcurr+0x2>
 126:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_avr_timer_cntcurr>
 148:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x2>
 150:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr>
 15e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x1>
 162:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_avr_timer_cntcurr+0x2>
 166:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <TimerFlag>
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 180:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 184:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 188:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr>
 18c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x1>
 190:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_avr_timer_cntcurr+0x2>
 194:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_init>:
 1e2:	84 e6       	ldi	r24, 0x64	; 100
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	e1 df       	rcall	.-62     	; 0x1aa <delay_ms>
 1e8:	88 e3       	ldi	r24, 0x38	; 56
 1ea:	f2 df       	rcall	.-28     	; 0x1d0 <LCD_WriteCommand>
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	f0 df       	rcall	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	ee df       	rcall	.-36     	; 0x1d0 <LCD_WriteCommand>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	ec df       	rcall	.-40     	; 0x1d0 <LCD_WriteCommand>
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 cf       	rjmp	.-84     	; 0x1aa <delay_ms>
 1fe:	08 95       	ret

00000200 <LCD_WriteData>:
 200:	5e 9a       	sbi	0x0b, 6	; 11
 202:	88 b9       	out	0x08, r24	; 8
 204:	5f 9a       	sbi	0x0b, 7	; 11
 206:	00 00       	nop
 208:	5f 98       	cbi	0x0b, 7	; 11
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	cd cf       	rjmp	.-102    	; 0x1aa <delay_ms>
 210:	08 95       	ret

00000212 <LCD_Cursor>:
 212:	81 31       	cpi	r24, 0x11	; 17
 214:	18 f4       	brcc	.+6      	; 0x21c <LCD_Cursor+0xa>
 216:	81 58       	subi	r24, 0x81	; 129
 218:	db cf       	rjmp	.-74     	; 0x1d0 <LCD_WriteCommand>
 21a:	08 95       	ret
 21c:	81 55       	subi	r24, 0x51	; 81
 21e:	d8 cf       	rjmp	.-80     	; 0x1d0 <LCD_WriteCommand>
 220:	08 95       	ret

00000222 <updateCount>:
}

void updateCount(int incValue) {
    const char MAX_COUNT = 9;
    const char MIN_COUNT = 0;
    unsigned char newCount = count + incValue;
 222:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count>
 226:	89 0f       	add	r24, r25
    if (MIN_COUNT <= newCount && newCount <= MAX_COUNT) {
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	10 f4       	brcc	.+4      	; 0x230 <updateCount+0xe>
        count = newCount;
 22c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <count>
 230:	08 95       	ret

00000232 <IncDec_tick>:
unsigned char count;
enum IncDec_States { Start, Wait, IncHold, DecHold, ResetHold };
void updateCount(int);
const unsigned char InitialCount = 3;
int IncDec_tick(int state) {
    switch (state) { // Transitions
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	91 05       	cpc	r25, r1
 236:	b1 f1       	breq	.+108    	; 0x2a4 <IncDec_tick+0x72>
 238:	2c f4       	brge	.+10     	; 0x244 <IncDec_tick+0x12>
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	59 f0       	breq	.+22     	; 0x254 <IncDec_tick+0x22>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	69 f0       	breq	.+26     	; 0x25c <IncDec_tick+0x2a>
 242:	54 c0       	rjmp	.+168    	; 0x2ec <IncDec_tick+0xba>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	91 05       	cpc	r25, r1
 248:	09 f4       	brne	.+2      	; 0x24c <IncDec_tick+0x1a>
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <IncDec_tick+0x98>
 24c:	04 97       	sbiw	r24, 0x04	; 4
 24e:	09 f4       	brne	.+2      	; 0x252 <IncDec_tick+0x20>
 250:	45 c0       	rjmp	.+138    	; 0x2dc <IncDec_tick+0xaa>
 252:	4c c0       	rjmp	.+152    	; 0x2ec <IncDec_tick+0xba>
        case Start:
            count = InitialCount;
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <count>
            state = Wait;
            break;
 25a:	48 c0       	rjmp	.+144    	; 0x2ec <IncDec_tick+0xba>
        case Wait:
            if (buttons == Inc) 
 25c:	80 b1       	in	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 95       	com	r24
 262:	90 95       	com	r25
 264:	87 70       	andi	r24, 0x07	; 7
 266:	99 27       	eor	r25, r25
 268:	02 97       	sbiw	r24, 0x02	; 2
 26a:	21 f4       	brne	.+8      	; 0x274 <IncDec_tick+0x42>
			{
				updateCount(1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	d8 df       	rcall	.-80     	; 0x222 <updateCount>
 272:	45 c0       	rjmp	.+138    	; 0x2fe <IncDec_tick+0xcc>
				state = IncHold;
			} 
			else if (buttons == Dec) 
 274:	80 b1       	in	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	87 70       	andi	r24, 0x07	; 7
 27e:	99 27       	eor	r25, r25
 280:	04 97       	sbiw	r24, 0x04	; 4
 282:	21 f4       	brne	.+8      	; 0x28c <IncDec_tick+0x5a>
			{
				updateCount(-1);
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	9f ef       	ldi	r25, 0xFF	; 255
 288:	cc df       	rcall	.-104    	; 0x222 <updateCount>
 28a:	42 c0       	rjmp	.+132    	; 0x310 <IncDec_tick+0xde>
				state = DecHold;
            } 
			else if (buttons == Reset) 
 28c:	80 b1       	in	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	87 70       	andi	r24, 0x07	; 7
 296:	99 27       	eor	r25, r25
 298:	06 97       	sbiw	r24, 0x06	; 6
 29a:	41 f5       	brne	.+80     	; 0x2ec <IncDec_tick+0xba>
			{
                count = InitialCount;
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <count>
 2a2:	3f c0       	rjmp	.+126    	; 0x322 <IncDec_tick+0xf0>
			{
                state = Wait;
            }
            break;
        case IncHold:
            if (buttons == Inc) {
 2a4:	80 b1       	in	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	87 70       	andi	r24, 0x07	; 7
 2ae:	99 27       	eor	r25, r25
 2b0:	02 97       	sbiw	r24, 0x02	; 2
 2b2:	29 f1       	breq	.+74     	; 0x2fe <IncDec_tick+0xcc>
                state = IncHold;
            } else if (buttons == Reset) { // Intentional bug. Leave in.
 2b4:	80 b1       	in	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	87 70       	andi	r24, 0x07	; 7
 2be:	99 27       	eor	r25, r25
 2c0:	06 97       	sbiw	r24, 0x06	; 6
 2c2:	a1 f4       	brne	.+40     	; 0x2ec <IncDec_tick+0xba>
                PORTD = 0xFF;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <IncDec_tick+0x96>
            } else {
                state = Wait;
            }
            break;
        case DecHold:
            if (buttons == Dec) {
 2ca:	80 b1       	in	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	87 70       	andi	r24, 0x07	; 7
 2d4:	99 27       	eor	r25, r25
 2d6:	04 97       	sbiw	r24, 0x04	; 4
 2d8:	49 f4       	brne	.+18     	; 0x2ec <IncDec_tick+0xba>
 2da:	1a c0       	rjmp	.+52     	; 0x310 <IncDec_tick+0xde>
            } else {
                state = Wait;
            }
            break;
        case ResetHold:
            if (buttons == Reset) {
 2dc:	80 b1       	in	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	87 70       	andi	r24, 0x07	; 7
 2e6:	99 27       	eor	r25, r25
 2e8:	06 97       	sbiw	r24, 0x06	; 6
        case Start:
		LCD_Cursor(1);LCD_WriteData(count+'0');
		break;
		
        case Wait:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 2ea:	d9 f0       	breq	.+54     	; 0x322 <IncDec_tick+0xf0>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	91 df       	rcall	.-222    	; 0x212 <LCD_Cursor>
 2f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <count>
 2f4:	80 5d       	subi	r24, 0xD0	; 208
 2f6:	84 df       	rcall	.-248    	; 0x200 <LCD_WriteData>
        break;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
		
		case IncHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 2fc:	08 95       	ret
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	88 df       	rcall	.-240    	; 0x212 <LCD_Cursor>
 302:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <count>
 306:	80 5d       	subi	r24, 0xD0	; 208
        break;
 308:	7b df       	rcall	.-266    	; 0x200 <LCD_WriteData>
 30a:	82 e0       	ldi	r24, 0x02	; 2
		
		case DecHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	08 95       	ret
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	7f df       	rcall	.-258    	; 0x212 <LCD_Cursor>
 314:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <count>
 318:	80 5d       	subi	r24, 0xD0	; 208
        break;
 31a:	72 df       	rcall	.-284    	; 0x200 <LCD_WriteData>
 31c:	83 e0       	ldi	r24, 0x03	; 3
		
		case ResetHold:
		LCD_Cursor(1);LCD_WriteData(count+'0');
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	76 df       	rcall	.-276    	; 0x212 <LCD_Cursor>
 326:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <count>
 32a:	80 5d       	subi	r24, 0xD0	; 208
 32c:	69 df       	rcall	.-302    	; 0x200 <LCD_WriteData>
        break;
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
 332:	08 95       	ret

00000334 <initPCInt>:
task *tasks[] = {&task1};
const unsigned short numTasks = sizeof (tasks)/ sizeof(task*);

void initPCInt()
{
	SREG = 0x01;		//Enable global interrupts
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	8f bf       	out	0x3f, r24	; 63
	PCICR = 0x01;		//Enable Pin Change Interrupt 0 (Pins 7 ... 0)
 338:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = 0x01;		//Enable Pin Change Interrupt on PCINT0 which is PA0
 33c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 340:	08 95       	ret

00000342 <__vector_4>:
}

unsigned char wakecount = 0;
ISR(PCINT0_vect)
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
	TimerOn();
 34c:	ce de       	rcall	.-612    	; 0xea <TimerOn>
	TimerSet(3000);
 34e:	68 eb       	ldi	r22, 0xB8	; 184
 350:	7b e0       	ldi	r23, 0x0B	; 11
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	b8 de       	rcall	.-656    	; 0xc8 <TimerSet>
	
	while(1)
	{
		if(SWITCH_PRESSED)
		{
			PORTB = 0x01;
 358:	91 e0       	ldi	r25, 0x01	; 1
	TimerOn();
	TimerSet(3000);
	
	while(1)
	{
		if(SWITCH_PRESSED)
 35a:	00 99       	sbic	0x00, 0	; 0
 35c:	07 c0       	rjmp	.+14     	; 0x36c <__vector_4+0x2a>
		{
			PORTB = 0x01;
 35e:	95 b9       	out	0x05, r25	; 5
			tasks[0]->active = 1;
 360:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 364:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 368:	91 83       	std	Z+1, r25	; 0x01
 36a:	06 c0       	rjmp	.+12     	; 0x378 <__vector_4+0x36>
		}
		else
		{
			PORTB = 0x00;
 36c:	15 b8       	out	0x05, r1	; 5
			tasks[0]->active = 0;
 36e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 372:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 376:	11 82       	std	Z+1, r1	; 0x01
		}
		while(!TimerFlag);
 378:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TimerFlag>
 37c:	88 23       	and	r24, r24
 37e:	e1 f3       	breq	.-8      	; 0x378 <__vector_4+0x36>
		TimerFlag = 0;
 380:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <TimerFlag>
	}
 384:	ea cf       	rjmp	.-44     	; 0x35a <__vector_4+0x18>

00000386 <main>:
	return state;
}
*/	
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 386:	11 b8       	out	0x01, r1	; 1
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 38c:	84 b9       	out	0x04, r24	; 4
 38e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 390:	87 b9       	out	0x07, r24	; 7
 392:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 394:	8a b9       	out	0x0a, r24	; 10
 396:	1b b8       	out	0x0b, r1	; 11
	unsigned char i = 0;
	
	unsigned long int SMTick1_period = 2;
	
	//Task 1 Counter task
	task1.state = -1; //task initial state
 398:	e6 e0       	ldi	r30, 0x06	; 6
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	80 83       	st	Z, r24
	task1.period = SMTick1_period;
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a0 e0       	ldi	r26, 0x00	; 0
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	82 83       	std	Z+2, r24	; 0x02
 3a8:	93 83       	std	Z+3, r25	; 0x03
 3aa:	a4 83       	std	Z+4, r26	; 0x04
 3ac:	b5 83       	std	Z+5, r27	; 0x05
	task1.active = 0x01;
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	21 83       	std	Z+1, r18	; 0x01
	task1.elapsedTime = SMTick1_period;
 3b2:	86 83       	std	Z+6, r24	; 0x06
 3b4:	97 83       	std	Z+7, r25	; 0x07
 3b6:	a0 87       	std	Z+8, r26	; 0x08
 3b8:	b1 87       	std	Z+9, r27	; 0x09
	task1.TickFct = &IncDec_tick;
 3ba:	89 e1       	ldi	r24, 0x19	; 25
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	93 87       	std	Z+11, r25	; 0x0b
 3c0:	82 87       	std	Z+10, r24	; 0x0a
	
	initPCInt();
 3c2:	b8 df       	rcall	.-144    	; 0x334 <initPCInt>
	LCD_init();
 3c4:	0e df       	rcall	.-484    	; 0x1e2 <LCD_init>
 3c6:	62 e3       	ldi	r22, 0x32	; 50
	TimerSet(50);
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	7c de       	rcall	.-776    	; 0xc8 <TimerSet>
	TimerOn();
 3d0:	8c de       	rcall	.-744    	; 0xea <TimerOn>
 3d2:	78 94       	sei
	
	sei();
 3d4:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
	
	while (1)
	{
		for ( i = 0; i < numTasks; i++)
		{
			if (tasks[i]->active == 0x01)
 3d8:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	61 f5       	brne	.+88     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3e2:	4e 81       	ldd	r20, Y+6	; 0x06
			{
				if(tasks[i]->elapsedTime == tasks[i]->period)
 3e4:	5f 81       	ldd	r21, Y+7	; 0x07
 3e6:	68 85       	ldd	r22, Y+8	; 0x08
 3e8:	79 85       	ldd	r23, Y+9	; 0x09
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	9b 81       	ldd	r25, Y+3	; 0x03
 3ee:	ac 81       	ldd	r26, Y+4	; 0x04
 3f0:	bd 81       	ldd	r27, Y+5	; 0x05
 3f2:	48 17       	cp	r20, r24
 3f4:	59 07       	cpc	r21, r25
 3f6:	6a 07       	cpc	r22, r26
 3f8:	7b 07       	cpc	r23, r27
 3fa:	81 f4       	brne	.+32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fc:	88 81       	ld	r24, Y
				{
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3fe:	ea 85       	ldd	r30, Y+10	; 0x0a
 400:	fb 85       	ldd	r31, Y+11	; 0x0b
 402:	08 2e       	mov	r0, r24
 404:	00 0c       	add	r0, r0
 406:	99 0b       	sbc	r25, r25
 408:	09 95       	icall
 40a:	88 83       	st	Y, r24
 40c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
					tasks[i]->elapsedTime = 0;
 410:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 414:	16 82       	std	Z+6, r1	; 0x06
 416:	17 82       	std	Z+7, r1	; 0x07
 418:	10 86       	std	Z+8, r1	; 0x08
 41a:	11 86       	std	Z+9, r1	; 0x09
 41c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
				}
				tasks[i]->elapsedTime += 1;
 420:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 424:	86 81       	ldd	r24, Z+6	; 0x06
 426:	97 81       	ldd	r25, Z+7	; 0x07
 428:	a0 85       	ldd	r26, Z+8	; 0x08
 42a:	b1 85       	ldd	r27, Z+9	; 0x09
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	a1 1d       	adc	r26, r1
 430:	b1 1d       	adc	r27, r1
 432:	86 83       	std	Z+6, r24	; 0x06
 434:	97 83       	std	Z+7, r25	; 0x07
 436:	a0 87       	std	Z+8, r26	; 0x08
 438:	b1 87       	std	Z+9, r27	; 0x09
 43a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TimerFlag>
			}
		}
		while (!TimerFlag);
 43e:	88 23       	and	r24, r24
 440:	e1 f3       	breq	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <TimerFlag>
		TimerFlag = 0;
 446:	c6 cf       	rjmp	.-116    	; 0x3d4 <main+0x4e>

00000448 <_exit>:
	}
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
